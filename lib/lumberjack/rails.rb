# frozen_string_literal: true

require "lumberjack"
require "active_support"

# Lumberjack is a logging framework for Ruby applications.
# This gem extends Lumberjack with Rails-specific functionality.
module Lumberjack
  # Rails integration for Lumberjack logger.
  #
  # This module provides integration between Lumberjack and Rails applications,
  # enhancing Rails' logging capabilities while maintaining compatibility with
  # existing Rails logging patterns.
  module Rails
    VERSION = ::File.read(::File.join(__dir__, "..", "..", "VERSION")).strip.freeze

    @silence_rack_request_started = false
    @silenced_log_events = Set.new

    class << self
      # Safely wrap Rails.logger with a Lumberjack context.
      #
      # @param additional_logger [Logger] an optional additional logger to wrap with a context.
      # @yield [Logger] the block to execute with the wrapped logger context.
      # @return [Object] the result of the block execution.
      def logger_context(additional_logger = nil, &block)
        rails_logger = ::Rails.logger
        Lumberjack.context do
          if additional_logger && rails_logger != additional_logger
            wrap_block_with_logger_context(rails_logger) do
              wrap_block_with_logger_context(additional_logger, &block)
            end
          else
            wrap_block_with_logger_context(rails_logger, &block)
          end
        end
      end

      # Configuration option to silence "Started ..." log lines in Rack::Logger.
      #
      # When set to true, the "Started ..." log lines generated by Rack::Logger
      # will be suppressed. This can help reduce log noise in applications where
      # these lines are not needed.
      #
      # @param value [Boolean] whether to silence "Started ..." log lines (default: false)
      # @return [void]
      def silence_rack_request_started=(value)
        @silence_rack_request_started = !!value
      end

      # Returns true if the "Started ..." log lines in Rack::Logger are silenced.
      #
      # @return [Boolean] whether to silence "Started ..." log lines (default: false)
      def silence_rack_request_started?
        @silence_rack_request_started
      end

      # EntryFormatter that adds a formatter for ActiveRecord models that outputs
      # only the type and id.
      #
      # @return [Lumberjack::EntryFormatter] the configured entry formatter
      def active_record_entry_formatter
        Lumberjack::EntryFormatter.build do |formatter|
          formatter.format_message("ActiveRecord::Base") { |record| "#{record.class.name}.#{record.id || "new_record"}" }
          formatter.format_attributes("ActiveRecord::Base", :id)
        end
      end

      private

      # Wrap a block with a logger context if the logger supports it.
      #
      # @param logger [Logger] the logger to wrap
      # @yield the block to execute within the logger context
      # @return [Object] the result of the block execution
      def wrap_block_with_logger_context(logger, &block)
        if logger&.respond_to?(:context)
          logger.context(&block)
        else
          block.call
        end
      end
    end
  end
end

require_relative "rails/action_cable_extension"
require_relative "rails/action_controller_extension"
require_relative "rails/action_controller_log_subscriber_extension"
require_relative "rails/action_mailbox_extension"
require_relative "rails/action_mailer_extension"
require_relative "rails/active_job_extension"
require_relative "rails/broadcast_logger_extension"
require_relative "rails/context_middleware"
require_relative "rails/log_at_level"
require_relative "rails/log_subscriber_extension"
require_relative "rails/rack_logger_extension"
require_relative "rails/request_attributes_middleware"
require_relative "rails/tagged_forked_logger"
require_relative "rails/tagged_logging_formatter"

require_relative "rails/apply_patches"

if defined?(::Rails::Railtie)
  require_relative "rails/railtie"
end
